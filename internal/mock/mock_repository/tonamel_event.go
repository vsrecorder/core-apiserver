// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/domain/repository/tonamel_event.go
//
// Generated by this command:
//
//	mockgen -source=./internal/domain/repository/tonamel_event.go -destination=./internal/mock/mock_repository/tonamel_event.go
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	entity "github.com/vsrecorder/core-apiserver/internal/domain/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockTonamelEventInterface is a mock of TonamelEventInterface interface.
type MockTonamelEventInterface struct {
	ctrl     *gomock.Controller
	recorder *MockTonamelEventInterfaceMockRecorder
	isgomock struct{}
}

// MockTonamelEventInterfaceMockRecorder is the mock recorder for MockTonamelEventInterface.
type MockTonamelEventInterfaceMockRecorder struct {
	mock *MockTonamelEventInterface
}

// NewMockTonamelEventInterface creates a new mock instance.
func NewMockTonamelEventInterface(ctrl *gomock.Controller) *MockTonamelEventInterface {
	mock := &MockTonamelEventInterface{ctrl: ctrl}
	mock.recorder = &MockTonamelEventInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTonamelEventInterface) EXPECT() *MockTonamelEventInterfaceMockRecorder {
	return m.recorder
}

// FindById mocks base method.
func (m *MockTonamelEventInterface) FindById(ctx context.Context, id string) (*entity.TonamelEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", ctx, id)
	ret0, _ := ret[0].(*entity.TonamelEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockTonamelEventInterfaceMockRecorder) FindById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockTonamelEventInterface)(nil).FindById), ctx, id)
}
