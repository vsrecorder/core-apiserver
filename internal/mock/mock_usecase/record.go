// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/usecase/record.go
//
// Generated by this command:
//
//	mockgen -source=./internal/usecase/record.go -destination=./internal/mock/mock_usecase/record.go
//

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"
	time "time"

	entity "github.com/vsrecorder/core-apiserver/internal/domain/entity"
	usecase "github.com/vsrecorder/core-apiserver/internal/usecase"
	gomock "go.uber.org/mock/gomock"
)

// MockRecordInterface is a mock of RecordInterface interface.
type MockRecordInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRecordInterfaceMockRecorder
	isgomock struct{}
}

// MockRecordInterfaceMockRecorder is the mock recorder for MockRecordInterface.
type MockRecordInterfaceMockRecorder struct {
	mock *MockRecordInterface
}

// NewMockRecordInterface creates a new mock instance.
func NewMockRecordInterface(ctrl *gomock.Controller) *MockRecordInterface {
	mock := &MockRecordInterface{ctrl: ctrl}
	mock.recorder = &MockRecordInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRecordInterface) EXPECT() *MockRecordInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRecordInterface) Create(ctx context.Context, param *usecase.RecordParam) (*entity.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, param)
	ret0, _ := ret[0].(*entity.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockRecordInterfaceMockRecorder) Create(ctx, param any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRecordInterface)(nil).Create), ctx, param)
}

// Delete mocks base method.
func (m *MockRecordInterface) Delete(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRecordInterfaceMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRecordInterface)(nil).Delete), ctx, id)
}

// Find mocks base method.
func (m *MockRecordInterface) Find(ctx context.Context, limit, offset int) ([]*entity.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, limit, offset)
	ret0, _ := ret[0].([]*entity.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockRecordInterfaceMockRecorder) Find(ctx, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockRecordInterface)(nil).Find), ctx, limit, offset)
}

// FindByDeckId mocks base method.
func (m *MockRecordInterface) FindByDeckId(ctx context.Context, deckId string, limit, offset int) ([]*entity.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByDeckId", ctx, deckId, limit, offset)
	ret0, _ := ret[0].([]*entity.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByDeckId indicates an expected call of FindByDeckId.
func (mr *MockRecordInterfaceMockRecorder) FindByDeckId(ctx, deckId, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByDeckId", reflect.TypeOf((*MockRecordInterface)(nil).FindByDeckId), ctx, deckId, limit, offset)
}

// FindById mocks base method.
func (m *MockRecordInterface) FindById(ctx context.Context, id string) (*entity.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", ctx, id)
	ret0, _ := ret[0].(*entity.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockRecordInterfaceMockRecorder) FindById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockRecordInterface)(nil).FindById), ctx, id)
}

// FindByOfficialEventId mocks base method.
func (m *MockRecordInterface) FindByOfficialEventId(ctx context.Context, officialEventId uint, limit, offset int) ([]*entity.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByOfficialEventId", ctx, officialEventId, limit, offset)
	ret0, _ := ret[0].([]*entity.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByOfficialEventId indicates an expected call of FindByOfficialEventId.
func (mr *MockRecordInterfaceMockRecorder) FindByOfficialEventId(ctx, officialEventId, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByOfficialEventId", reflect.TypeOf((*MockRecordInterface)(nil).FindByOfficialEventId), ctx, officialEventId, limit, offset)
}

// FindByTonamelEventId mocks base method.
func (m *MockRecordInterface) FindByTonamelEventId(ctx context.Context, tonamelEventId string, limit, offset int) ([]*entity.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByTonamelEventId", ctx, tonamelEventId, limit, offset)
	ret0, _ := ret[0].([]*entity.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByTonamelEventId indicates an expected call of FindByTonamelEventId.
func (mr *MockRecordInterfaceMockRecorder) FindByTonamelEventId(ctx, tonamelEventId, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByTonamelEventId", reflect.TypeOf((*MockRecordInterface)(nil).FindByTonamelEventId), ctx, tonamelEventId, limit, offset)
}

// FindByUserId mocks base method.
func (m *MockRecordInterface) FindByUserId(ctx context.Context, uid string, limit, offset int) ([]*entity.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUserId", ctx, uid, limit, offset)
	ret0, _ := ret[0].([]*entity.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUserId indicates an expected call of FindByUserId.
func (mr *MockRecordInterfaceMockRecorder) FindByUserId(ctx, uid, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUserId", reflect.TypeOf((*MockRecordInterface)(nil).FindByUserId), ctx, uid, limit, offset)
}

// FindByUserIdOnCursor mocks base method.
func (m *MockRecordInterface) FindByUserIdOnCursor(ctx context.Context, uid string, limit int, cursor time.Time) ([]*entity.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUserIdOnCursor", ctx, uid, limit, cursor)
	ret0, _ := ret[0].([]*entity.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUserIdOnCursor indicates an expected call of FindByUserIdOnCursor.
func (mr *MockRecordInterfaceMockRecorder) FindByUserIdOnCursor(ctx, uid, limit, cursor any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUserIdOnCursor", reflect.TypeOf((*MockRecordInterface)(nil).FindByUserIdOnCursor), ctx, uid, limit, cursor)
}

// FindOnCursor mocks base method.
func (m *MockRecordInterface) FindOnCursor(ctx context.Context, limit int, cursor time.Time) ([]*entity.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOnCursor", ctx, limit, cursor)
	ret0, _ := ret[0].([]*entity.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOnCursor indicates an expected call of FindOnCursor.
func (mr *MockRecordInterfaceMockRecorder) FindOnCursor(ctx, limit, cursor any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOnCursor", reflect.TypeOf((*MockRecordInterface)(nil).FindOnCursor), ctx, limit, cursor)
}

// Update mocks base method.
func (m *MockRecordInterface) Update(ctx context.Context, id string, param *usecase.RecordParam) (*entity.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, param)
	ret0, _ := ret[0].(*entity.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockRecordInterfaceMockRecorder) Update(ctx, id, param any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRecordInterface)(nil).Update), ctx, id, param)
}
