// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/usecase/deck.go
//
// Generated by this command:
//
//	mockgen -source=./internal/usecase/deck.go -destination=./internal/mock/mock_usecase/deck.go
//

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"
	time "time"

	entity "github.com/vsrecorder/core-apiserver/internal/domain/entity"
	usecase "github.com/vsrecorder/core-apiserver/internal/usecase"
	gomock "go.uber.org/mock/gomock"
)

// MockDeckInterface is a mock of DeckInterface interface.
type MockDeckInterface struct {
	ctrl     *gomock.Controller
	recorder *MockDeckInterfaceMockRecorder
	isgomock struct{}
}

// MockDeckInterfaceMockRecorder is the mock recorder for MockDeckInterface.
type MockDeckInterfaceMockRecorder struct {
	mock *MockDeckInterface
}

// NewMockDeckInterface creates a new mock instance.
func NewMockDeckInterface(ctrl *gomock.Controller) *MockDeckInterface {
	mock := &MockDeckInterface{ctrl: ctrl}
	mock.recorder = &MockDeckInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeckInterface) EXPECT() *MockDeckInterfaceMockRecorder {
	return m.recorder
}

// Archive mocks base method.
func (m *MockDeckInterface) Archive(ctx context.Context, id string) (*entity.Deck, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Archive", ctx, id)
	ret0, _ := ret[0].(*entity.Deck)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Archive indicates an expected call of Archive.
func (mr *MockDeckInterfaceMockRecorder) Archive(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Archive", reflect.TypeOf((*MockDeckInterface)(nil).Archive), ctx, id)
}

// Create mocks base method.
func (m *MockDeckInterface) Create(ctx context.Context, param *usecase.DeckParam) (*entity.Deck, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, param)
	ret0, _ := ret[0].(*entity.Deck)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockDeckInterfaceMockRecorder) Create(ctx, param any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDeckInterface)(nil).Create), ctx, param)
}

// Delete mocks base method.
func (m *MockDeckInterface) Delete(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockDeckInterfaceMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDeckInterface)(nil).Delete), ctx, id)
}

// Find mocks base method.
func (m *MockDeckInterface) Find(ctx context.Context, limit, offset int) ([]*entity.Deck, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, limit, offset)
	ret0, _ := ret[0].([]*entity.Deck)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockDeckInterfaceMockRecorder) Find(ctx, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockDeckInterface)(nil).Find), ctx, limit, offset)
}

// FindById mocks base method.
func (m *MockDeckInterface) FindById(ctx context.Context, id string) (*entity.Deck, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", ctx, id)
	ret0, _ := ret[0].(*entity.Deck)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockDeckInterfaceMockRecorder) FindById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockDeckInterface)(nil).FindById), ctx, id)
}

// FindByUserId mocks base method.
func (m *MockDeckInterface) FindByUserId(ctx context.Context, uid string, archivedFlg bool, limit, offset int) ([]*entity.Deck, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUserId", ctx, uid, archivedFlg, limit, offset)
	ret0, _ := ret[0].([]*entity.Deck)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUserId indicates an expected call of FindByUserId.
func (mr *MockDeckInterfaceMockRecorder) FindByUserId(ctx, uid, archivedFlg, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUserId", reflect.TypeOf((*MockDeckInterface)(nil).FindByUserId), ctx, uid, archivedFlg, limit, offset)
}

// FindByUserIdOnCursor mocks base method.
func (m *MockDeckInterface) FindByUserIdOnCursor(ctx context.Context, uid string, archivedFlg bool, limit int, cursor time.Time) ([]*entity.Deck, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUserIdOnCursor", ctx, uid, archivedFlg, limit, cursor)
	ret0, _ := ret[0].([]*entity.Deck)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUserIdOnCursor indicates an expected call of FindByUserIdOnCursor.
func (mr *MockDeckInterfaceMockRecorder) FindByUserIdOnCursor(ctx, uid, archivedFlg, limit, cursor any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUserIdOnCursor", reflect.TypeOf((*MockDeckInterface)(nil).FindByUserIdOnCursor), ctx, uid, archivedFlg, limit, cursor)
}

// FindOnCursor mocks base method.
func (m *MockDeckInterface) FindOnCursor(ctx context.Context, limit int, cursor time.Time) ([]*entity.Deck, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOnCursor", ctx, limit, cursor)
	ret0, _ := ret[0].([]*entity.Deck)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOnCursor indicates an expected call of FindOnCursor.
func (mr *MockDeckInterfaceMockRecorder) FindOnCursor(ctx, limit, cursor any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOnCursor", reflect.TypeOf((*MockDeckInterface)(nil).FindOnCursor), ctx, limit, cursor)
}

// Unarchive mocks base method.
func (m *MockDeckInterface) Unarchive(ctx context.Context, id string) (*entity.Deck, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unarchive", ctx, id)
	ret0, _ := ret[0].(*entity.Deck)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Unarchive indicates an expected call of Unarchive.
func (mr *MockDeckInterfaceMockRecorder) Unarchive(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unarchive", reflect.TypeOf((*MockDeckInterface)(nil).Unarchive), ctx, id)
}

// Update mocks base method.
func (m *MockDeckInterface) Update(ctx context.Context, id string, param *usecase.DeckParam) (*entity.Deck, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, param)
	ret0, _ := ret[0].(*entity.Deck)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockDeckInterfaceMockRecorder) Update(ctx, id, param any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDeckInterface)(nil).Update), ctx, id, param)
}
